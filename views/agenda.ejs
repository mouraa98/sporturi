<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jogos</title>
    <link rel="stylesheet" href="/css/styles.css">
    <link rel="stylesheet" href="/css/agenda.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="icon" type="image/png" href="/assets/favicon.png">
    
</head>
<body>
    <header>
        <div class="logo">
            <a href="/"><img src="/assets/logo.png" alt="Logo do Campeonato"></a>
        </div>
        <nav>
            
            <a href="/" class="admin-button"><i class="fas fa-arrow-left"></i> Voltar</a>
        </nav>
    </header>
    
    <div class="main-content">
        <div class="container">
            <h1><i class="fa-solid fa-futbol"></i> Jogos</h1>
            <!-- Barra de pesquisa -->
            <div class="search-bar">
                <input type="text" id="searchInput" placeholder="Pesquisar jogos..." onkeyup="filtrarJogos()">
                <i class="fas fa-search"></i>
            </div>
    
            <% if (agenda && agenda.length > 0) { %>
                <% let campeonatos = {}; %>
    
                <!-- Organiza jogos por campeonato -->
                <% agenda.forEach((jogo) => { %>
                    <% if (!campeonatos[jogo.camp]) { campeonatos[jogo.camp] = []; } %>
                    <% campeonatos[jogo.camp].push(jogo); %>
                <% }); %>
    
                <% Object.keys(campeonatos).forEach((campName) => { %>
                    <div class="campeonato">
                        <h2><%= campName %></h2>
                        <div class="jogos-lista">
                            <% campeonatos[campName].forEach((jogo) => { %>
                                <div class="jogo-card" data-jogo="<%= jogo.data %>">
                                    <div class="data"><%= jogo.data %> <span class="dia-semana"></span></div>
                                    <div class="times">
                                        <span class="time"><%= jogo.time1 %></span>
                                        <img src="<%= jogo.logo1 %>" alt="Logo do Time 1">
                                        <span class="versus">X</span>
                                        <img src="<%= jogo.logo2 %>" alt="Logo do Time 2">
                                        <span class="time"><%= jogo.time2 %></span>
                                    </div>
                                    <div class="detalhes">
                                        <span><i class="fas fa-map-marker-alt"></i> <%= jogo.local %></span>
                                        <span><i class="fas fa-clock"></i><%= jogo.hora %>h</span>
                                    </div>
                                    <button class="compartilhar-btn" 
                                            data-time1="<%= jogo.time1 %>" 
                                            data-logo1="<%= jogo.logo1 %>" 
                                            data-time2="<%= jogo.time2 %>" 
                                            data-logo2="<%= jogo.logo2 %>" 
                                            data-data="<%= jogo.data %>" 
                                            data-local="<%= jogo.local %>" 
                                            data-hora="<%= jogo.hora %>"
                                            data-campeonato="<%= jogo.camp %>">Compartilhar</button>
                                </div>
                            <% }); %>
                        </div>
                    </div>
                <% }); %>
            <% } else { %>
                <p class="sem-jogos">Nenhum jogo agendado.</p>
            <% } %>
        </div>
    </div>
    <!-- Popup de carregamento -->
<div id="loadingPopup" class="popup-overlay">
    <div class="popup-content">
        <p>Gerando imagem...</p>
        <div class="loader"></div>
    </div>
</div>

    <footer>
        <p>&copy; 2025 SporTuri. Todos os direitos reservados.</p>
    </footer>

    <script>
        // Função para converter a data do JSON (YYYY-MM-DD) para "DD/MM (dia abreviado)"
        function formatarData(dataString) {
            let partes = dataString.split('-');
            if (partes.length !== 3) return dataString;
    
            let ano = parseInt(partes[0], 10);
            let mes = parseInt(partes[1], 10) - 1;
            let dia = parseInt(partes[2], 10);
    
            let dataObj = new Date(ano, mes, dia);
            if (isNaN(dataObj)) return dataString;
    
            let diasSemana = ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sáb"];
            let diaSemana = diasSemana[dataObj.getDay()];
    
            return `${dia.toString().padStart(2, '0')}/${(mes + 1).toString().padStart(2, '0')} ${diaSemana}`;
        }
    
        // Obter datas de hoje e amanhã no formato YYYY-MM-DD
        function obterDataFormatada(diasAdicionais = 0) {
            let data = new Date();
            data.setDate(data.getDate() + diasAdicionais);
            let ano = data.getFullYear();
            let mes = (data.getMonth() + 1).toString().padStart(2, '0');
            let dia = data.getDate().toString().padStart(2, '0');
            return `${ano}-${mes}-${dia}`;
        }
    
        const dataHoje = obterDataFormatada(0);
        const dataAmanha = obterDataFormatada(1);
    
        // Atualizar as datas e adicionar "HOJE" ou "AMANHÃ"
        document.querySelectorAll(".jogo-card").forEach(el => {
            let dataElemento = el.querySelector(".data");
            if (!dataElemento) return;
    
            let dataOriginal = dataElemento.textContent.trim();
            let novaData = formatarData(dataOriginal);
            dataElemento.innerHTML = novaData;
    
            // Criar selo de indicação (HOJE / AMANHÃ)
            let selo = document.createElement("div");
            selo.classList.add("selo-dia");
    
            if (dataOriginal === dataHoje) {
                selo.classList.add("hoje-card");
                selo.textContent = "HOJE";
                el.style.position = "relative";
                el.appendChild(selo);
            } else if (dataOriginal === dataAmanha) {
                selo.classList.add("amanha-card");
                selo.textContent = "AMANHÃ";
                el.style.position = "relative";
                el.appendChild(selo);
            }
        });
    </script>

    <script>
        // Função para converter a data do JSON (YYYY-MM-DD) para "DD/MM (dia abreviado)"
        function removerAcentosEFormatar(texto) {
    return texto
        .toLowerCase()
        .normalize("NFD")
        .replace(/[\u0300-\u036f]/g, "")
        .replace(/\s+/g, ' ') // Remove espaços extras
        .trim();
}

function filtrarJogos() {
    let input = removerAcentosEFormatar(document.getElementById("searchInput").value);
    let campeonatos = document.querySelectorAll(".campeonato");

    campeonatos.forEach(campeonato => {
        let jogos = campeonato.querySelectorAll(".jogo-card");
        let algumVisivel = false;

        jogos.forEach(card => {
            let timesElement = card.querySelector(".times");
            if (!timesElement) return;

            let times = removerAcentosEFormatar(timesElement.textContent);

            if (times.includes(input) || input === "") {
                card.style.display = "";
                algumVisivel = true;
            } else {
                card.style.display = "none";
            }
        });

        // Se nenhum jogo do campeonato estiver visível, esconde o campeonato
        campeonato.style.display = algumVisivel ? "" : "none";
    });
}

document.addEventListener("DOMContentLoaded", () => {
    document.getElementById("searchInput").addEventListener("input", filtrarJogos);
});

    </script>
    
    <script>
       function removerAcentosEFormatar(texto) {
    return texto
        .toLowerCase()
        .normalize("NFD")
        .replace(/[\u0300-\u036f]/g, "")
        .replace(/\s+/g, ' ') // Remove espaços extras
        .trim();
}

function filtrarJogos() {
    let input = removerAcentosEFormatar(document.getElementById("searchInput").value);
    let campeonatos = document.querySelectorAll(".campeonato");

    campeonatos.forEach(campeonato => {
        let jogos = campeonato.querySelectorAll(".jogo-card");
        let algumVisivel = false;

        jogos.forEach(card => {
            let timesElement = card.querySelector(".times");
            if (!timesElement) return;

            let times = removerAcentosEFormatar(timesElement.textContent);

            if (times.includes(input) || input === "") {
                card.style.display = "";
                algumVisivel = true;
            } else {
                card.style.display = "none";
            }
        });

        // Remove o campeonato se não houver jogos visíveis
        if (!algumVisivel) {
            campeonato.remove();
        }
    });

    // Se a pesquisa for apagada, recarrega a página para restaurar os campeonatos
    if (input === "") {
        location.reload();
    }
}

document.addEventListener("DOMContentLoaded", () => {
    document.getElementById("searchInput").addEventListener("input", filtrarJogos);
});

    </script>
    

    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script>
        function carregarImagem(src) {
            return new Promise((resolve, reject) => {
                const img = new Image();
                img.crossOrigin = "anonymous";
                img.onload = () => {
                    console.log("Imagem carregada com sucesso:", src);
                    resolve(img);
                };
                img.onerror = (err) => {
                    console.error("Erro ao carregar imagem:", src, err);
                    reject(err);
                };

                if (src.endsWith('.svg')) {
                    fetch(src)
                        .then(response => response.text())
                        .then(svgData => {
                            img.src = 'data:image/svg+xml;base64,' + btoa(svgData);
                        })
                        .catch(error => reject(error));
                } else {
                    img.src = src;
                }
            });
        }

        async function gerarImagem(botao, time1, logo1, time2, logo2, data, local, hora, campeonato) {
            const loadingPopup = document.getElementById("loadingPopup");

            try {
                // Exibe o popup de carregamento
                loadingPopup.style.display = "flex";

                console.log("Iniciando geração de imagem...");
                const canvas = document.createElement("canvas");
                canvas.width = 1080;
                canvas.height = 1350;
                const ctx = canvas.getContext("2d");

                const fundo = await carregarImagem("/assets/flyer.png");
                const logoSite = await carregarImagem("/assets/logo.png");
                const img1 = await carregarImagem(logo1);
                const img2 = await carregarImagem(logo2);
                const iconeMapa = await carregarImagem("/assets/icons/localizacao.svg");
                const iconeCalendario = await carregarImagem("/assets/icons/calendario.svg");
                const iconeCampeonato = await carregarImagem("/assets/icons/trophy.svg");
                const iconeRelogio = await carregarImagem("/assets/icons/relogio.svg");

                if (!fundo) throw new Error("Imagem de fundo não carregada.");
                if (!logoSite) throw new Error("Logo do site não carregada.");
                if (!img1) throw new Error("Logo do Time 1 não carregada.");
                if (!img2) throw new Error("Logo do Time 2 não carregada.");
                if (!iconeMapa) throw new Error("Ícone de mapa não carregado.");
                if (!iconeCalendario) throw new Error("Ícone de calendário não carregado.");
                if (!iconeCampeonato) throw new Error("Ícone de campeonato não carregado.");
                if (!iconeRelogio) throw new Error("Ícone de relógio não carregado.");

                console.log("Todas as imagens foram carregadas.");

                ctx.drawImage(fundo, 0, 0, 1080, 1350);
                ctx.drawImage(logoSite, 50, 50, 200, 100);

                // Obter a data atual e a data do jogo
                const hoje = new Date();
                const dataJogo = new Date(data); // data do jogo

                // Formatando a data atual para comparações (ano, mês e dia)
                const hojeFormatada = hoje.getFullYear() + '-' + 
                            String(hoje.getMonth() + 1).padStart(2, '0') + '-' + 
                            String(hoje.getDate()).padStart(2, '0'); // "YYYY-MM-DD"
                const dataJogoFormatada = dataJogo.toISOString().split('T')[0]; // "YYYY-MM-DD"

                let diaJogo = "";

                // Comparando a data do jogo com a data atual e amanhã
                if (dataJogoFormatada === hojeFormatada) {
                    diaJogo = "HOJE";
                } else {
                    // Verifica se o jogo é amanhã
                    const amanha = new Date();
                    amanha.setDate(hoje.getDate() + 1); // ajusta para o dia seguinte
                    const amanhaFormatada = amanha.toISOString().split('T')[0];

                    if (dataJogoFormatada === amanhaFormatada) {
                        diaJogo = "AMANHÃ";
                    }
                }

                // Desenhar o card "Hoje" ou "Amanhã", caso a data seja hoje ou amanhã
                if (diaJogo) {
                    ctx.fillStyle = diaJogo === "HOJE" ? "green" : "orange";
                    ctx.fillRect(800, 50, 200, 50);
                    ctx.fillStyle = "#ffffff";
                    ctx.font = "bold 30px Arial";
                    ctx.fillText(diaJogo, 840, 85);
                }

                // Desenhar o ícone de campeonato e o nome do campeonato centralizado
                ctx.drawImage(iconeCampeonato, canvas.width / 2 - 25, 100, 50, 50);
                ctx.fillStyle = "#ffffff";
                ctx.font = "bold 50px Arial";
                ctx.textAlign = "center";
                ctx.fillText(campeonato, canvas.width / 2, 200);

                // Desenhar as logos dos times maiores e os nomes abaixo
                ctx.drawImage(img1, 200, 350, 250, 250);
                ctx.drawImage(img2, 630, 350, 250, 250);

                ctx.fillStyle = "#ffffff";
                ctx.font = "bold 40px Arial";
                ctx.textAlign = "center";
                ctx.fillText(time1, 325, 650);
                ctx.fillText(time2, 755, 650);

                // Desenhar o ícone de calendário e a data/hora
                ctx.drawImage(iconeCalendario, 100, 700, 50, 50);
                ctx.fillStyle = "#ffffff";
                ctx.font = "bold 40px Arial";
                ctx.textAlign = "left";
                ctx.fillText(`${data}`, 170, 740);

                // Desenhar o ícone de relógio e a hora
                ctx.drawImage(iconeRelogio, 100, 780, 50, 50);
                ctx.fillText(`${hora}h`, 170, 820);

                // Card do local com cantos arredondados e texto centralizado
                const cardX = 40;
                const cardY = 850;
                const cardWidth = canvas.width - 80;
                const cardHeight = 100;
                const borderRadius = 20;

                ctx.fillStyle = "#010e2d";
                ctx.roundRect(cardX, cardY, cardWidth, cardHeight, borderRadius);
                ctx.fill();

                const iconeMapaX = cardX + 20;
                const iconeMapaY = 870;
                ctx.drawImage(iconeMapa, iconeMapaX, iconeMapaY, 50, 60);

                ctx.fillStyle = "#ffffff";
                ctx.font = "bold 35px Arial";
                ctx.textAlign = "left";
                ctx.fillText(local, iconeMapaX + 60, 910);

                const imgFinal = canvas.toDataURL("image/png");
                const link = document.createElement("a");
                link.href = imgFinal;
                link.download = `jogo_${time1}_vs_${time2}.png`;
                link.click();

            } catch (error) {
                console.error("Erro ao gerar imagem:", error);
                alert("Erro ao gerar imagem. Veja o console para mais detalhes.");
                if (error.stack) {
                    console.error(error.stack);
                }
            } finally {
                // Fecha o popup de carregamento
                loadingPopup.style.display = "none";
            }
        }

        document.querySelectorAll('.compartilhar-btn').forEach(button => {
            button.addEventListener('click', function() {
                const time1 = this.getAttribute('data-time1');
                const logo1 = this.getAttribute('data-logo1');
                const time2 = this.getAttribute('data-time2');
                const logo2 = this.getAttribute('data-logo2');
                const data = this.getAttribute('data-data');
                const local = this.getAttribute('data-local');
                const hora = this.getAttribute('data-hora');
                const campeonato = this.getAttribute('data-campeonato');
                gerarImagem(this, time1, logo1, time2, logo2, data, local, hora, campeonato);
            });
        });

        if (!CanvasRenderingContext2D.prototype.roundRect) {
            CanvasRenderingContext2D.prototype.roundRect = function (x, y, width, height, radius) {
                if (width < 2 * radius) radius = width / 2;
                if (height < 2 * radius) radius = height / 2;
                this.beginPath();
                this.moveTo(x + radius, y);
                this.arcTo(x + width, y, x + width, y + height, radius);
                this.arcTo(x + width, y + height, x, y + height, radius);
                this.arcTo(x, y + height, x, y, radius);
                this.arcTo(x, y, x + width, y, radius);
                this.closePath();
                return this;
            }
        }

        function toggleLogoInput(logoId) {
            const urlInput = document.getElementById(`${logoId}_url`);
            const fileInput = document.getElementById(`${logoId}_file`);
            const urlRadio = document.querySelector(`input[name="${logoId}_type"][value="url"]`);
            const fileRadio = document.querySelector(`input[name="${logoId}_type"][value="file"]`);

            if (urlRadio.checked) {
                urlInput.style.display = 'block';
                urlInput.required = true;
                fileInput.style.display = 'none';
                fileInput.required = false;
            } else {
                urlInput.style.display = 'none';
                urlInput.required = false;
                fileInput.style.display = 'block';
                fileInput.required = true;
            }
        }

        // Inicializa os campos corretamente ao carregar a página
        document.addEventListener('DOMContentLoaded', function() {
            toggleLogoInput('logo1');
            toggleLogoInput('logo2');
        });
    </script>


</body>
</html>
